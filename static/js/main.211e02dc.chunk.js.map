{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","isValid","linkValidation","link","test","changeHandler","event","target","name","value","setState","prevState","clearForm","handleSubmit","preventDefault","props","onAdd","handleChange","handleBlur","trim","this","isButtonDisabled","onSubmit","htmlFor","type","id","required","placeholder","onChange","classNames","onBlur","disabled","Component","App","moviesFromServer","addMovie","currentState","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.211e02dc.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { Component, ChangeEvent } from 'react';\nimport './NewMovie.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\ntype State = {\n  movie: Movie,\n\n  isValid: {\n    title: boolean,\n    imdbUrl: boolean,\n    imdbId: boolean,\n    imgUrl: boolean,\n  },\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    movie: {\n      title: '',\n      description: '',\n      imdbUrl: '',\n      imdbId: '',\n      imgUrl: '',\n    },\n    isValid: {\n      title: true,\n      imdbUrl: true,\n      imdbId: true,\n      imgUrl: true,\n    },\n  };\n\n  linkValidation = (link: string) => {\n    const linkRegExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    return linkRegExp.test(link);\n  };\n\n  changeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  clearForm = () => {\n    this.setState({\n      movie: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n    });\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    this.props.onAdd({ ...this.state.movie });\n    this.clearForm();\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.target;\n\n    this.setState((state) => ({\n      movie: {\n        ...state.movie,\n        [name]: value,\n      },\n      isValid: {\n        ...state.isValid,\n        [name]: true,\n      },\n    }));\n  };\n\n  handleBlur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case ('title'):\n      case ('imdbId'):\n        this.setState(state => (\n          {\n            isValid: {\n              ...state.isValid,\n              [name]: !(value.trim() === ''),\n            },\n          }\n        ));\n        break;\n      case ('imdbUrl'):\n      case ('imgUrl'):\n        this.setState(state => (\n          {\n            isValid: {\n              ...state.isValid,\n              [name]: this.linkValidation(value),\n            },\n          }\n        ));\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { movie, isValid } = this.state;\n    const isButtonDisabled = !movie.title\n    || !movie.imdbId\n    || !this.linkValidation(movie.imdbUrl)\n    || !this.linkValidation(movie.imgUrl);\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"new-movie\"\n      >\n        <div className=\"form__container\">\n          <label className=\"form__label\" htmlFor=\"title\">\n            Title *\n            <input\n              type=\"text\"\n              name=\"title\"\n              className=\"form__input\"\n              id=\"title\"\n              required\n              value={movie.title}\n              placeholder=\"Enter title\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"form__label\" htmlFor=\"imgUrl\">\n            ImgUrl *\n            <input\n              type=\"text\"\n              name=\"imgUrl\"\n              className={classNames('form__input', { 'form__input--invalid': !isValid.imgUrl })}\n              id=\"imgUrl\"\n              required\n              value={movie.imgUrl}\n              placeholder=\"Enter IMG URL\"\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n            />\n            {isValid.imgUrl || <p className=\"new-movie__error\">Url is invalid</p>}\n          </label>\n\n          <label className=\"form__label\" htmlFor=\"imdbUrl\">\n            ImdbUrl *\n            <input\n              type=\"text\"\n              name=\"imdbUrl\"\n              className={classNames('form__input', { 'form__input--invalid': !isValid.imdbUrl })}\n              id=\"imdbUrl\"\n              required\n              value={movie.imdbUrl}\n              placeholder=\"Enter IMDB URL\"\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n            />\n            {isValid.imdbUrl || <p className=\"new-movie__error\">Url is invalid</p>}\n\n          </label>\n          <label className=\"form__label\" htmlFor=\"imdbId\">\n            ImdbId*\n            <input\n              type=\"text\"\n              name=\"imdbId\"\n              className={classNames('form__input', { 'form__input--invalid': !isValid.imdbId })}\n              id=\"imdbId\"\n              required\n              value={movie.imdbId}\n              placeholder=\"Enter IMDB id\"\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n            />\n            {isValid.imdbId || <p className=\"new-movie__error\">Add IMDB Id</p>}\n\n          </label>\n          <label className=\"form__label\" htmlFor=\"description\">\n            Description\n            <textarea\n              name=\"description\"\n              className=\"form__textarea\"\n              id=\"description\"\n              value={movie.description}\n              placeholder=\"Enter description\"\n              onChange={this.handleChange}\n            />\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"form__button\"\n          disabled={isButtonDisabled}\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState((currentState) => ({\n      movies: [\n        ...currentState.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}